									C语法：

									
	；【分号】：表明一个逻辑实体的结束
	”/*...*/“ ：注释符号
	
标识符：
	用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）

保留关键字：
	void
	char
	short
	int
	long
	float
	double
	signed ：有符号
	unsigned ：无符号
	const ：定义常量
	enum ：枚举
	sizeof
	
	register ：定义存储在寄存器中而不是 RAM 中的局部变量
	auto ：所有局部变量的默认存储类型
	static ：在程序的生命周期内保持局部变量的存在
	typedef ：
	extern ：声明变量or函数【声明后，不占用内存空间，在程序的生命周期内保持局部变量的存在】
	
	
	volatile
	default
	case
	if
	for
	while
	do
	else
	goto
	break
	switch
	continue
	return
	struct
	union
	_Packed
	

指针指向 void：
		类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 void *malloc( size_t size ); 返回指向 void 的指针，可以转换为任何数据类型。
		
C 中有两种类型的表达式：
	左值（lvalue）：指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。	右值（rvalue）：术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。
	变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。
	
常量：
	整数常量：
		整数常量可以是十进制、八进制或十六进制的常量
		前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。
		后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。
	浮点数常量：
		由整数部分、小数点、小数部分和指数部分组成，可使用小数形式或者指数形式来表示浮点常量
			当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者
			当使用指数形式表示时，必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。
	字符常量：
		使用双引号括起来的
	定义常量：【两种】
		1、使用#define预处理器
		2、使用const关键字
		
		
运算符：
	算术运算符：+(加)、-(减)、*(乘)、/(除)、%(取模)、++(自增)、--(自减)
	
	关系运算符：	
		运算符			描述														实例
		==		检查两个操作数的值是否相等，如果相等则条件为真。				(A == B) 不为真。
		!=		检查两个操作数的值是否相等，如果不相等则条件为真。				(A != B) 为真。
		>		检查左操作数的值是否大于右操作数的值，如果是则条件为真。		(A > B) 不为真。
		<		检查左操作数的值是否小于右操作数的值，如果是则条件为真。		(A < B) 为真。
		>=		检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	(A >= B) 不为真。
		<=		检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	(A <= B) 为真。
	
	逻辑运算符：
		&&(与)、||(或)、!(非)
	
	位运算符：	
				p	q	p&q		p|q		p^q
				0	0	 0		0		0
				0	1	 0		1		1
				1	1	 1		1		0
				1	0	 0		1		1
	例：假设变量 A 的值为 60 [0011 1100]，变量 B 的值为 13[0000 1101]，则：  
	  运算符						描述													实例
		&		如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。		(A & B) 将得到 12，即为 0000 1100
		|		如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。			(A | B) 将得到 61，即为 0011 1101
		^		如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。	(A ^ B) 将得到 49，即为 0011 0001
		~		二进制补码运算符是一元运算符，具有"翻转"位效果，即0变成1，1变成0。	(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。
		<<		二进制左移运算符。左操作数的值向左移动右操作数指定的位数。		A << 2 将得到 240，即为 1111 0000
		>>		二进制右移运算符。左操作数的值向右移动右操作数指定的位数。		A >> 2 将得到 15，即为 0000 1111
	  注：&：同真才真，不同为假
		  |：有真为真，同假为假
		  ^：相同为0，不同为1
		  
	复制运算符：
		运算符			描述														实例
		=	   简单的赋值运算符，把右边操作数的值赋给左边操作数					   C = A + B 将把 A + B 的值赋给 C
		+=	   加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	   C += A 相当于 C = C + A
		-=	   减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	   C -= A 相当于 C = C - A
		*=	   乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	   C *= A 相当于 C = C * A
		/=	   除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	   C /= A 相当于 C = C / A
		%=	   求模且赋值运算符，求两个操作数的模赋值给左边操作数				   C %= A 相当于 C = C % A
		<<=	   左移且赋值运算符				C <<= 2 等同于 C = C << 2
		>>=	   右移且赋值运算符				C >>= 2 等同于 C = C >> 2
		&=	   按位与且赋值运算符			C &= 2 等同于 C = C & 2
		^=	   按位异或且赋值运算符			C ^= 2 等同于 C = C ^ 2
		|=	   按位或且赋值运算符			C |= 2 等同于 C = C | 2
		
	杂项运算符：【sizeof & 三元】	
		运算符			描述				实例
		sizeof()	返回变量的大小。	sizeof(a) 将返回 4，其中 a 是整数。
		&			返回变量的地址。	&a; 将给出变量的实际地址。
		*			指向一个变量。		*a; 将指向一个变量。
		? :			条件表达式			【a==10?X:Y】如果条件为真 ? 则值为 X : 否则值为 Y
		
	运算符优先级：
		类别 		运算符 							 结合性 
		后缀 	() [] -> . ++ - -  					从左到右 
		一元 	+ - ! ~ ++ - - (type)* & sizeof 	从右到左 
		乘除 	* / % 		从左到右 
		加减 	+ - 		从左到右 
		移位 	<< >> 		从左到右 
		关系 	< <= > >= 	从左到右 
		相等 	== != 		从左到右 
		位与 AND 	& 		从左到右 
		位异或 XOR 	^ 		从左到右 
		位或 OR 	| 		从左到右 
		逻辑与 AND 	&& 		从左到右 
		逻辑或 OR 	|| 		从左到右 
		条件 	?: 			从右到左 
		赋值 	= += -= *= /= %=>>= <<= &= ^= |= 	从右到左 
		逗号 	, 	从左到右 
		
判断句：
	语句						描述
	if 语句				一个 if 语句 由一个布尔表达式后跟一个或多个语句组成。
	if...else 语句		一个 if 语句 后可跟一个可选的 else 语句，else 语句在布尔表达式为假时执行。
	嵌套 if 语句		您可以在一个 if 或 else if 语句内使用另一个 if 或 else if 语句。
	switch 语句			一个 switch 语句允许测试一个变量等于多个值时的情况。
	嵌套 switch 语句	您可以在一个 switch 语句内使用另一个 switch 语句。	
		
循环语句：
	循环类型						描述
	while 循环		当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。
	for 循环		多次执行一个语句序列，简化管理循环变量的代码。
	do...while 		循环	除了它是在循环主体结尾测试条件外，其他与 while 语句类似。
	嵌套循环		您可以在 while、for 或 do..while 循环内使用一个或多个循环。
		
循环控制语句：
	控制语句						描述
	break 语句		终止循环或 switch 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。
	continue 语句	告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。
	goto 语句		将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。
		
定义函数：【函数由一个函数头和一个函数主体组成】
	一般形式如下：
		return_type function_name( parameter list )
		{
			body of the function
		}
	返回类型：一个函数可以返回一个值。return_type 是函数返回的值的数据类型。当函数不需要返回值时，return_type 就是 void。
	函数名称：函数的实际名称。函数名和参数列表一起构成了函数签名。
	参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的。
	函数主体：函数主体包含一组定义函数执行任务的语句	

函数声明：
	函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。
	函数声明包括以下几个部分：
		return_type function_name( parameter list );	
	例：
		int max(int num1, int num2);
	在函数声明中，参数的类型必须有，参数名不是必要的，如：
		int max(int, int);
		
函数参数：
	形式参数：如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数。
	形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。
	当调用函数时，有两种向函数传递参数的方式：
		调用类型					描述
		传值调用	该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。
		引用调用	通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。
	默认情况下，C 使用传值调用来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。
		
内部函数
	如果一个函数只能被本文件中其他函数所调用，它称为内部函数。在定义内部函数时，在函数名和函数类型的前面加 static，即
		static 类型名 函数名 （形参表）
	例如，函数的首行：
		static int max(int a,intb)
	内部函数又称静态函数。使用内部函数，可以使函数的作用域只局限于所在文件。即使在不同的文件中有同名的内部函数，也互不干扰。提高了程序的可靠性。

外部函数
	如果在定义函数时，在函数的首部的最左端加关键字 extern，则此函数是外部函数，可供其它文件调用。
	如函数首部可以为
		extern int max (int a,intb)
	C 语言规定，如果在定义函数时省略 extern，则默认为外部函数。
	在需要调用此函数的其他文件中，需要对此函数作声明（不要忘记，即使在本文件中调用一个函数，也要用函数原型来声明）。在对此函数作声明时，要加关键字 extern，表示该函数是在其他文件中定义的外部函数。		
		
变量的作用域规则：
	三个地方可以声明变量：
		1、函数内部或块内部的局部变量
		2、所有函数之外的全局变量
		3、在形式参数的函数参数定义中
		
	局部变量：
		在某个函数或块内部声明的变量
	全局变量：
		定义在函数之外，可以被任何函数访问
	形式参数：
		函数的参数，形式参数，被当作该函数内的局部变量，它们会优先覆盖全局变量
	初始化：
		局部变量被定义时，系统不会对其初始化；
		全局变量定义时，系统会对其进行初始化；
		【推荐养成良好习惯，对定义的变量进行初始化】
	形式参数即是只是声明了一个作为参数的变量，并未直接进行赋值使用，而实际参数则相反。	
		
数组：
	存储 固定相同数据类型元素 的顺序集合
	所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素
	声明数组：
		type arrayName[arraySize]
			type：c语言的任意有效类型
			arraySize：大于零的整数常量
		例：int array_test[5];
	数组初始化；
		int array_test[]={0,1,2,3,4}  
	or  array_test[4]=4【最后一个元素赋值为4】
		“{}”：大括号中的数量不能大于声明时arraySize的数值
		
	访问数组元素：
		数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：
		int a = array_test[4];	
		此时，a的值就是4
		
		概念						描述
	多维数组		C 支持多维数组。多维数组最简单的形式是二维数组。
	传递数组给函数	可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。
	从函数返回数组	C 允许从函数返回数组。
	指向数组的指针	可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。
		
		
	？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？
	指针与数组的区别
		char *str="Hello";
		char arrgs[]="Hello";
	字符数组:
		char *p=(char*)&arrgs == char *p=arrgs ;
		char *p=(char*)(&(arrgs[0])) == &arrgs == arrgs;
	字符串指针:
		char *p=(char*)&str != str; str==str[0] =='H'
	得出结论字符数组的 首地址可以用 arrgs ，&arrgs,来表示并且它们相等，
	但是指针&str和str是不同的,当遇到字符串指针时候要注意处理方式;
	？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？
		
指针：
	指针是一个变量，其值是另一个变量的内存地址
	指针变量声明的一般形式为：
		type *var-name;
		*：用来声明这个变量是指针变量
	注：所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。

	指针的使用：
		使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值。
	例：
		#include <stdio.h>
 
		int main ()
		{
			int  var = 20;   /* 实际变量的声明 */
			int  *ip;        /* 指针变量的声明 */
			ip = &var;       /* 在指针变量中存储 var 的地址 */
 
			printf("Address of var variable: %x\n", &var  );
 
			/* 在指针变量中存储的地址 */
			printf("Address stored in ip variable: %x\n", ip );
 
			/* 使用指针访问值 */
			printf("Value of *ip variable: %d\n", *ip );

			return 0;
		}
		结果：
			Address of var variable: bffd8b3c
			Address stored in ip variable: bffd8b3c
			Value of *ip variable: 20

	NULL指针：
		在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。
		int  *ptr = NULL;
		printf(”ptr 的值是 %x\n“,ptr)；
		结果为：“ptr 的值是 0”
		
			概念				描述
		指针的算术运算	 可以对指针进行四种算术运算：++、--、+、-
		指针数组		 可以定义用来存储指针的数组。
		指向指针的指针	 C 允许指向指针的指针。
		传递指针给函数	 通过引用或地址传递参数，使传递的参数在调用函数中被改变。
		从函数返回指针	 C 允许函数返回指针到局部变量、静态变量和动态内存分配。	
		
	注：
		1、大多数的系统上，程序不允许访问地址为0的内存，该内存是系统保留的
		2、内存地址0有特别重要的意义，它表明该指针不执行一个可以访问的内存位置
		4、按照惯例，如果指针包含空值（零值），则假定它不指向任何可访问的内存
		3、所有指针在创建是，都要初始化，如果不知道，就赋值为0，没有初始化的指针称为失控指针（野指针）
		
函数指针：
	函数指针是指向函数的指针变量。
	通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。
	函数指针和函数一样，用于调用函数、传递参数。
	函数指针变量的声明：
		返回值类型 ( * 指针变量名) ([形参列表]);
		typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型
	注：
		指向函数的指针变量没有++和--运算
	
	指针函数和函数指针的区别：
		指针函数是指返回值是指针的函数，即本质是一个函数
			定义格式如下所示：
				返回类型标识符*函数名称（形式参数表）
				{函数体}
		
回调函数：
	函数指针作为某个函数的参数
	函数指针作为某个函数的参数
	   +------------------------------------------------------------------------------------+
	   |  以下是自知乎作者常溪玲的解说：													|
	   |	你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过	|
	   |	了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这	|
	   |	个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后	|
	   |	来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去	|
	   |	取货叫做响应回调事件。															|
	   +------------------------------------------------------------------------------------+		
		
字符串：
	字符串实际上是使用 null 字符 '\0' 终止的一维字符数组
	在数组中，由于在数组的末尾存储了空字符，所以字符数组的大小比单词 "Hello" 的字符数多一个
		函数 						目的
		strcpy(s1, s2);		复制字符串 s2 到字符串 s1。
		strcat(s1, s2);		连接字符串 s2 到字符串 s1 的末尾。
		strlen(s1);			返回字符串 s1 的长度。
		strcmp(s1, s2);		如果 s1 和 s2 是相同的，则返回 0；如果 s1<s2 则返回小于 0；如果 s1>s2 则返回大于 0。
		strchr(s1, ch);		返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。
		strstr(s1, s2);		返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。

结构体：
	定义一个包含多个成员（或多种数据类型）的新的数据类型
	struct 语句的格式如下：	
		struct [structure tag]
		{
			type  varname;
			type  varname;
			...
			type  varname;
		} [one or more structure variables];	
	"structure tag"：是可选的，	
	在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，是可选的	
		例：
			struct Books
			{
				char  title[50];
				char  author[50];
				char  subject[100];
				int   book_id;
			} book;
		BOOKS：是我们自定义的变量类型，类似int、char、float等
		book：是变量名称，类似"int a;"中的a
	
	结构体变量定义：
		struct Books
		{
			char  title[50];
			char  author[50];
			char  subject[100];
			int   book_id;
		};
		struct Books  book1;   //定义变量book1，类型Books
		struct Books  book2;   //定义变量book2，类型Books
		
	访问结构体成员：
		使用 成员访问符（.）
		例：
			book1.title
		
	结构体作为函数参数：
		把结构作为函数参数，传参方式与其他类型的变量或指针类似
			void printBook( struct Books book );   /* 函数声明 */
		
	结构体的指针：
		struct Books *struct_pointer;
		struct_pointer = &Book1;
	使用指针访问结构体内部成员：【->】
		struct_pointer->title;
		
位域：
		有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，
	只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，
	称为"位域"或"位段"。
		所谓"位域"是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许
	在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。
	典型的实例：
		用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。
		读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。
		
	位域的定义和位域变量的说明：
		位域定义与结构定义相仿，其形式为：
			struct 位域结构名 
			{
				位域列表
			};
		其中位域列表的形式为：
			类型说明符 位域名: 位域长度 
		
		例：
			struct bs
			{
				int a:8;
				int b:2;
				int c:6;
			}data;
		data 为 bs 变量，共占两个字节；
		位域 a 占 8 位；
		位域 b 占 2 位；
		位域 c 占 6 位；
		
	位域说明：
		1、一个位域必须存储在同一个字节中，不能跨两个字节。如一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。
		例：
			struct bs{
				unsigned a:4;
				unsigned  :4;    /* 空域、该4位不能使用 */
				unsigned b:4;    /* 从下一单元开始存放 */
				unsigned c:4
			}
		在这个位域定义中，a 占第一字节的 4 位，后 4 位填 0 表示不使用，b 从第二字节开始，占用 4 位，c 占用 4 位
		
		2、由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。如果最大长度大于计算机的整数字长，一些编译器可能会允许域的内存重叠，另外一些编译器可能会把大于一个域的部分存储在下一个字中。
		
		3、位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的
		
	位域的使用：
		位域变量名.位域名
		位域变量名->位域名
		
	例：
		main(){
			struct bs{
			unsigned a:1;
			unsigned b:3;
			unsigned c:4;
		} bit,*pbit;
		bit.a=1;    /* 给位域赋值（应注意赋值不能超过该位域的允许范围） */
		bit.b=7;    /* 给位域赋值（应注意赋值不能超过该位域的允许范围） */
		bit.c=15;    /* 给位域赋值（应注意赋值不能超过该位域的允许范围） */
		printf("%d,%d,%d\n",bit.a,bit.b,bit.c);    /* 以整型量格式输出三个域的内容 */
		pbit=&bit;    /* 把位域变量 bit 的地址送给指针变量 pbit */
		pbit->a=0;    /* 用指针方式给位域 a 重新赋值，赋为 0 */
		
		/* 使用了复合的位运算符 "&="，相当于：pbit->b=pbit->b&3，位域 b 中原有值为 7，与 3 作按位与运算的结果为 3（111&011=011，十进制值为 3） */
		pbit->b&=3;    
		
		pbit->c|=1;    /* 使用了复合位运算符"|="，相当于：pbit->c=pbit->c|1，其结果为 15 */
		printf("%d,%d,%d\n",pbit->a,pbit->b,pbit->c);    /* 用指针方式输出了这三个域的值 */
	}	
	上例程序中定义了位域结构 bs，三个位域为 a、b、c。说明了 bs 类型的变量 bit 和指向 bs 类型的指针变量 pbit。这表示位域也是可以使用指针的	
		
共用体：【和结构体十分类似】
	是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型
	union 语句定义了一个新的数据类型，带有多个成员
	union 语句的格式如下：
		union [union tag]
		{
			type varname;
			...
			type varname;
		} [one or more union variables];
		
	”union tag“： 是可选的	
	例：
		union Data
		{
			int i;
			float f;
			char  str[20];
		};
		union Data  data1；
		
	访问共用体成员：
		成员访问运算符（.）
		
	结构体和共用体的区别：
		结构体变量所占内存长度是各成员占的内存长度之和。每个成员分别占有其自己的内存单元。
		共用体变量所占的内存长度等于最长的成员变量的长度。例如，教程中定义的共用体Data各占20个字节（因为char str[20]变量占20个字节）,而不是各占4+4+20=28个字节
	
	共用体的
		作用：	
			节省内存，有两个很长的数据结构，不会同时使用
		应用场景：
			通信中的数据包会用到共用体:因为不知道对方会发一个什么包过来，用共用体的话就很简单了，定义几种格式的包，收到包之后就可以直接根据包的格式取出数据。
		
位域：
		struct
		{
			unsigned int widthValidated : 1;
			unsigned int heightValidated : 1;
		} status;
	上面的结构中，status 变量将占用 4 个字节的内存空间，但是只有 2 位被用来存储值。如果您用了 32 个变量，每一个变量宽度为 1 位，那么 status 结构将使用 4 个字节，但只要您再多用一个变量，如果使用了 33 个变量，那么它将分配内存的下一段来存储第 33 个变量，这个时候就开始使用 8 个字节
		
	位域声明：
		在结构体内声明位域，如下：
			struct
			{
				type [member_name]:width;
			};
	位域中变量元素的描述：
		
		元素					描述
		type		整数类型，决定了如何解释位域的值。类型可以是整型、有符号整型、无符号整型。
		member_name	位域的名称。
		width		位域中位的数量。宽度必须小于或等于指定类型的位宽度。
	带有预定义宽度的变量被称为位域。位域可以存储多于 1 位的数，例如，需要一个变量来存储从 0 到 7 的值	
		
typedef：
	使用typedef关键字可以为类型取一个新的名字
		typedef   unsigned char BYTE;
	标识符BYTE可以作为类型unsigned char 的缩写
	按照惯例，定义时会大写字母【推荐】，但小写字母也行
	例：
		对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量
			typedef struct Books
			{
				char  title[50];
				char  author[50];
				char  subject[100];
				int   book_id;
			} Book;
			Book mybook;  //定义变量
	
		typedef和#define的区别：
			1、typedef仅限于为类型定义符号名称，#define不仅可以为类型定义别名，也能为数值定义别名，
			2、typedef是有编译器执行解释的，#define语句是有预编译器进行处理的
			
			
C的输入&输出：
	c语言把所有的设备都当做文件。
	以下三个文件会在程序执行是自动打开，以便访问键盘和屏幕：
		标准文件	文件指针	设备
		标准输入	stdin		键盘
		标准输出	stdout		屏幕
		标准错误	stderr		您的屏幕
			
	c语言中通常使用printf()和scanf()两个函数进行I/O操作
	scanf()函数用于从标准输入（键盘）读取并格式化，printf()函数发送格式化输出到标准输出（屏幕）
	
	printf():
		%d：格式化输出整数
		%f：格式化输出浮点型数据
			
	getchar() & putchar()函数：
		int getchar(void)：函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一时间内只会读取
		一个单一的字符。
		int putchar(int c)：函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一时间内只会输出一个单一字符
			
	gets() & puts()：
		char *gets(char *s)函数从stdin读取一行到s所指想的缓冲区，知道一个终止符或EOF
		int puts(const char *s)函数把字符串s和一个尾随的换行符写入到stdout
	
	scanf()  & printf()：
		int scanf(const char *format,...)函数从标准输入流stdin读取输入，并根据提供的format来浏览输入
		int printf(const char *format,...)函数把输出写入到标准输出流stdout，并根据提供的格式产生输出
		format可以是一个简单的常量字符串，可以指定%s、%d、%c、%f等来输出或读取字符串、整数、字符或浮点数
			
	注：
		gets()
			gets函数原型：char*gets(char*buffer);//读取字符到数组：gets(str);str为数组名。
			gets函数功能：从键盘上输入字符，直至接受到换行符或EOF时停止，并将读取的结果存放在buffer指针所指向的字符数组中。
			读取的换行符被转换为null值，做为字符数组的最后一个字符，来结束字符串。
			注意：gets函数由于没有指定输入字符大小，所以会无限读取，一旦输入的字符大于数组长度，就会发生内存越界，
			从而造成程序崩溃或其他数据的错误。
		fgets()
			fgets函数原型：char *fgets(char *s, int n, FILE *stream);//我们平时可以这么使用：fgets(str, sizeof(str), stdin);
			其中str为数组首地址，sizeof(str)为数组大小，stdin表示我们从键盘输入数据。
			fgets函数功能：从文件指针stream中读取字符，存到以s为起始地址的空间里，知道读完N-1个字符，或者读完一行。
			注意：调用fgets函数时，最多只能读入n-1个字符。读入结束后，系统将自动在最后加'\0'，并以str作为函数值返回。
			
C文件读写：
	打开文件：
		fopen()函数用来创建一个新的文件或打开一个已有的文件，这个调用会初始化类型FILE的一个对象，类型FILE包含了所有用来控制流量的必要信息。
		函数原型：
			FILE *fopen( const char * filename, const char * mode );
			filename 是字符串，用来命名文件，
			访问模式 mode 的值可以是下列值中的一个：	
			模式	描述
			r		打开一个已有的文本文件，允许读取文件。
			w		打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。
			a		打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。
			r+		打开一个文本文件，允许读写文件。
			w+		打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。
			a+		打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。
		如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：
			"rb", "wb", "ab", "rb+", "r+b", "wb+", "w+b", "ab+", "a+b"	
			
	关闭文件：
		fclose()函数，函数原型如下：
			 int fclose( FILE *fp );
		fclose()函数返回0，代表成功关闭文件
		fclose()函数返回EOF，代表关闭文件时发生错误
		此函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存，EOF是定义在头文件stdio.h中的常量。
		
	写入文件：
		把字符写入到流中的最简单的函数：
			int fputc( int c, FILE *fp );
		函数 fputc() 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 EOF	
		
			int fputs( const char *s, FILE *fp );
		函数 fputs() 把字符串 s 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 EOF。
			
			int fprintf(FILE *fp,const char *format, ...);
		使用 fprintf() 函数来写把一个字符串写入到文件中	
			
	读取文件：
		从文件读取单个字符的最简单的函数：
			int fgetc( FILE * fp );
		fgetc() 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 EOF
		
			char *fgets( char *buf, int n, FILE *fp );
		从流中读取一个字符串，	
		函数 fgets() 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 buf，并在最后追加一个 null 字符来终止字符串；	
		如果这个函数在读取最后一个字符之前就遇到一个换行符 '\n' 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符；	
			
			int fscanf(FILE *fp, const char *format, ...);
		使用 fscanf() 函数来从文件中读取字符串，但是在遇到第一个空格字符时，它会停止读取.	
		
	二进制 I/O 函数:
		size_t fread(void *ptr, size_t size_of_elements, size_t number_of_elements, FILE *a_file);
		size_t fwrite(const void *ptr, size_t size_of_elements, size_t number_of_elements, FILE *a_file);
		
		这两个函数都是用于存储块的读写 - 通常是数组或结构体
		
	注：
		fseek 可以移动文件指针到指定位置读,或插入写:
			int fseek(FILE *stream, long offset, int whence);
		fseek 设置当前读写点到 offset 处, whence 可以是 SEEK_SET,SEEK_CUR,SEEK_END 这些值决定是从文件头、当前点和文件尾计算偏移量 offset。
		定义一个文件指针 FILE *fp,当你打开一个文件时，文件指针指向开头，你要指到多少个字节，只要控制偏移量就好，
		例如：
			相对当前位置往后移动一个字节：fseek(fp,1,SEEK_CUR); 中间的值就是偏移量。
			如果你要往前移动一个字节，直接改为负值就可以：fseek(fp,-1,SEEK_CUR)。
		
C预处理器：【缩写：CPP】
	C预处理器只不过是一个文本替换工具，简写成CPP
	所有预处理器都是以井号（#）开头，它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。
	以下是所有重要的预处理器指令：
		指令		描述
		#define		定义宏
		#include	包含一个源代码文件
		#undef		取消已定义的宏
		#ifdef		如果宏已经定义，则返回真
		#ifndef		如果宏没有定义，则返回真
		#if			如果给定条件为真，则编译下面代码
		#else		#if 的替代方案
		#elif		如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码
		#endif		结束一个 #if……#else 条件编译块
		#error		当遇到标准错误时，输出错误消息
		#pragma		使用标准化方法，向编译器发布特殊的命令到编译器中
	
	预处理器实例：
		#define MAX_ARRAY_LENGTH 20
		这个指令告诉 CPP 把所有的 MAX_ARRAY_LENGTH 替换为 20。使用 #define 定义常量来增强可读性。
		
		#include <stdio.h>
		#include "myheader.h"
		第一行告诉 CPP 从系统库中获取 stdio.h，并添加文本到当前的源文件中。
		第二行告诉 CPP 从本地目录中获取 myheader.h，并添加内容到当前的源文件中。
		
		#undef  FILE_SIZE
		#define FILE_SIZE 42
		这个指令告诉 CPP 取消已定义的 FILE_SIZE，并定义它为 42
		
		#ifndef MESSAGE
			#define MESSAGE "You wish!"
		#endif
		这个指令告诉 CPP 只有当 MESSAGE 未定义时，才定义 MESSAGE。
		
		#ifdef DEBUG
			/* Your debugging statements here */
		#endif
		这个指令告诉 CPP 如果定义了 DEBUG，则执行处理语句。在编译时，如果您向 gcc 编译器传递了 -DDEBUG 开关量，这个指令就非常有用。它定义了 DEBUG，您可以在编译期间随时开启或关闭调试。
		
	预定义宏：
		ANSI C 定义了许多宏。在编程中您可以使用这些宏，但是不能直接修改这些预定义的宏。
		宏			描述
		__DATE__	当前日期，一个以 "MMM DD YYYY" 格式表示的字符常量。
		__TIME__	当前时间，一个以 "HH:MM:SS" 格式表示的字符常量。
		__FILE__	这会包含当前文件名，一个字符串常量。
		__LINE__	这会包含当前行号，一个十进制常量。
		__STDC__	当编译器以 ANSI 标准编译时，则定义为 1。
		
	预处理器运算符：
		C 预处理器提供了下列的运算符来帮助您创建宏：
		宏延续运算符（\）
			一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（\）。
		例如：
			#define  message_for(m, n)  \
				printf(#a " and " #b ": We love you!\n")

		字符串常量化运算符（#）
			在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表。
			此运算符类似于shell脚本中，相当于"$"的作用实现对参数的引用;
			在引用的时候，m会替换printf函数中的#a，n会替换printf函数中的#b;
		例如：
		#include <stdio.h>
		#define  message_for(a, b)  \
			printf(#a " and " #b ": We love you!\n")

		int main(void)
		{
			message_for(Carole, Debra);
			return 0;
		}
		当上面的代码被编译和执行时，它会产生下列结果：
		Carole and Debra: We love you!

		标记粘贴运算符（##）
			宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。
		例如：
		#include <stdio.h>
		#define tokenpaster(n) printf ("token" #n " = %d", token##n)

		int main(void)
		{
			int token34 = 40;

			tokenpaster(34);
			return 0;
		}
		当上面的代码被编译和执行时，它会产生下列结果：
		token34 = 40
		这是怎么发生的，因为这个实例会从编译器产生下列的实际输出：
			printf ("token34 = %d", token34);
		这个实例演示了 token##n 会连接到 token34 中，在这里，我们使用了字符串常量化运算符（#）和标记粘贴运算符（##）。

		defined() 运算符
			预处理器 defined 运算符是用在常量表达式中的，用来确定一个标识符是否已经使用 #define 定义过。
			如果指定的标识符已定义，则值为真（非零）。
			如果指定的标识符未定义，则值为假（零）。
		下面的实例演示了 defined() 运算符的用法：
		#include <stdio.h>

		#if !defined (MESSAGE)
			#define MESSAGE "You wish!"
		#endif

		int main(void)
		{
			printf("Here is the message: %s\n", MESSAGE);  
			return 0;
		}
		当上面的代码被编译和执行时，它会产生下列结果：
		Here is the message: You wish!
		
	参数化的宏:	
		CPP 一个强大的功能是可以使用参数化的宏来模拟函数.
		例如，下面的代码是计算一个数的平方：
			int square(int x) 
			{
				return x * x;
			}
		我们可以使用宏重写上面的代码，如下：
			#define square(x) ((x) * (x))
		注：在使用带有参数的宏之前，必须使用 #define 指令定义。参数列表是括在圆括号内，且必须紧跟在宏名称的后边。宏名称和左圆括号之间不允许有空格
		例：
			#include <stdio.h>
			#define MAX(x,y) ((x) > (y) ? (x) : (y))

			int main(void)
			{
				printf("Max between 20 and 10 is %d\n", MAX(10, 20));  
				return 0;
			}
		当上面的代码被编译和执行时，它会产生下列结果：
		Max between 20 and 10 is 20
		
C头文件：
	头文件是扩展名为 .h 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。
	有两种类型的头文件：
		程序员编写的头文件；
		编译器自带的头文件；	
	在程序中要使用头文件，需要使用 C 预处理指令 #include 来引用它；	
	引用头文件相当于复制头文件的内容，但是我们不会直接在源文件中复制头文件的内容，因为这么做很容易出错，特别在程序是由多个源文件组成的时候。	
	在C/C++中，建议把所有的常量、宏、系统全局变量和函数原型写在头文件中，在需要的时候随时引用这些头文件。	
		
	引用头文件的语法：
		使用预处理指令 #include 可以引用用户和系统头文件。它的形式有以下两种
			#include <file>
			#include "file"
		第一种形式：用于引用系统头文件。它在系统目录的标准列表中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。
		第二种形式：用于引用用户头文件。它在包含当前文件的目录中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。
		
	引用头文件的操作：
		#include 指令会指示 C 预处理器浏览指定的文件作为输入。
		预处理器的输出包含了已经生成的输出，被引用文件生成的输出以及 #include 指令之后的文本输出。
		例如，如果您有一个头文件 header.h，如下：
			char *test (void);
		和一个使用了头文件的主程序 program.c，如下：
			int x;
			#include "header.h"
			
			int main (void)
			{
				puts (test ());
			}
		编译器会看到如下的令牌流：
			int x;
			char *test (void);

			int main (void)
			{
				puts (test ());
			}
	
	只引用一次头文件：
		如果一个头文件被引用两次，编译器会处理两次头文件的内容，这将产生错误。为了防止这种情况，标准的做法是把文件的整个内容放在条件编译语句中。
		例：
			#ifndef HEADER_FILE
			#define HEADER_FILE
				the entire header file file
			#endif
		这种结构就是通常所说的包装器 #ifndef。
		当再次引用头文件时，条件为假，因为 HEADER_FILE 已定义。此时，预处理器会跳过文件的整个内容，编译器会忽略它。
		
	有条件引用：
		有时需要从多个不同的头文件中选择一个引用到程序中。例如，需要指定在不同的操作系统上使用的配置参数。
		可以通过一系列条件来实现这点，如下：
			#if SYSTEM_1
				# include "system_1.h"
			#elif SYSTEM_2
				# include "system_2.h"
			#elif SYSTEM_3
				...
			#endif
		但是如果头文件比较多的时候，这么做是很不妥当的，预处理器使用宏来定义头文件的名称。
		这就是所谓的有条件引用。它不是用头文件的名称作为 #include 的直接参数，您只需要使用宏名称代替即可：
			#define SYSTEM_H "system_1.h"
				...
			#include SYSTEM_H
		SYSTEM_H 会扩展，预处理器会查找 system_1.h，就像 #include 最初编写的那样。SYSTEM_H 可通过 -D 选项被您的 Makefile 定义。
	注：
		在有多个 .h 文件和多个 .c 文件的时候，往往我们会用一个 global.h 的头文件来包括所有的 .h 文件，然后在除 global.h 文件外的头文件中 包含 global.h 就可以实现所有头文件的包含，同时不会乱。方便在各个文件里面调用其他文件的函数或者变量。
			#ifndef _GLOBAL_H
			#define _GLOBAL_H
			#include <fstream>
			#include <iostream>
			#include <math.h>
			#include <Config.h>
		
C的强制类型转换：
	是把变量从一种类型转换为另一种数据类型。
	使用强制类型转换运算符来把值显式地从一种类型转换为另一种类型，格式如下：
		(type_name) expression
	请看下面的实例，使用强制类型转换运算符把一个整数变量除以另一个整数变量，得到一个浮点数：
		#include <stdio.h>	

		main()
		{
			int sum = 17, count = 5;
			double mean;

			mean = (double) sum / count;
			printf("Value of mean : %f\n", mean );

		}
	当上面的代码被编译和执行时，它会产生下列结果：
		Value of mean : 3.400000
	这里要注意的是强制类型转换运算符的优先级大于除法，因此 sum 的值首先被转换为 double 型，然后除以 count，得到一个类型为 double 的值。	
		
	类型转换可以是隐式的，由编译器自动执行，也可以是显式的，通过使用强制类型转换运算符来指定。在编程时，有需要类型转换的时候都用上强制类型转换运算符，是一种良好的编程习惯。	
		
	整数提升：
		整数提升是指把小于 int 或 unsigned int 的整数类型转换为 int 或 unsigned int 的过程。
		请看下面的实例，在 int 中添加一个字符：
			#include <stdio.h>

			main()
			{
				int  i = 17;
				char c = 'c'; /* ascii 值是 99 */
				int sum;

				sum = i + c;
				printf("Value of sum : %d\n", sum );

			}
		当上面的代码被编译和执行时，它会产生下列结果：
			Value of sum : 116
		在这里，sum 的值为 116，因为编译器进行了整数提升，在执行实际加法运算时，把 'c' 的值转换为对应的 ascii 值。
		
	常用的算术转换：
		常用的算术转换是隐式地把值强制转换为相同的类型。编译器首先执行整数提升，如果操作数类型不同，则它们会被转换为下列层次中出现的最高层次的类型：
			int -->  unsigned int  -->  long  -->  unsigned long -->  long long -->  unsigned long long -->  float  -->  double  -->  long double
			
	常用的算术转换不适用于赋值运算符、逻辑运算符 && 和 ||	
		
C错误处理：
	C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。
	在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 errno，该错误代码是全局变量，表示在函数调用期间发生了错误。
	可以在 <error.h> 头文件中找到各种各样的错误代码。
	开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。	
		
	errno、perror() 和 strerror()：
		C 语言提供了 perror() 和 strerror() 函数来显示与 errno 相关的文本消息。
		perror() 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。
		strerror() 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。
		
	被零除的错误：
		在进行除法运算时，如果不检查除数是否为零，则会导致一个运行时错误
		
	程序退出状态：
		通常情况下，程序成功执行完一个操作正常退出的时候会带有值 EXIT_SUCCESS。在这里，EXIT_SUCCESS 是宏，它被定义为 0。
		如果程序中存在一种错误情况，当您退出程序时，会带有状态值 EXIT_FAILURE，被定义为 -1。
		
C递归：
	递归指的是在函数的定义中调用函数自身的方法
	格式：
		void recursion()
		{
			recursion(); /* 函数调用自身 */
		}
 
		int main()
		{
			recursion();
		}
	C 语言支持递归，即一个函数可以调用其自身。但在使用递归时，程序员需要注意定义一个从函数退出的条件，否则会进入死循环。	
		
		
	数的阶乘：
		#include <stdio.h>
 
		double factorial(unsigned int i)
		{
			if(i <= 1)
			{
				return 1;
			}
			return i * factorial(i - 1);
		}
		int  main()
		{
			int i = 15;
			printf("%d 的阶乘为 %f\n", i, factorial(i));
			return 0;
		}
		
	斐波那契数列：
		#include <stdio.h>
 
		int fibonaci(int i)
		{
			if(i == 0)
			{
				return 0;
			}
			if(i == 1)
			{
				return 1;
			}
			return fibonaci(i-1) + fibonaci(i-2);
		}
 
		int  main()
		{
			int i;
			for (i = 0; i < 10; i++)
			{
				printf("%d\t\n", fibonaci(i));
			}
			return 0;
		}
	采用递归方法来解决问题，必须符合以下三个条件：
		1、可以把要解决的问题转化为一个新问题，而这个新的问题的解决方法仍与原来的解决方法相同，只是所处理的对象有规律地递增或递减。
		说明：解决问题的方法相同，调用函数的参数每次不同（有规律的递增或递减），如果没有规律也就不能适用递归调用。
		
		2、可以应用这个转化过程使问题得到解决。
		说明：使用其他的办法比较麻烦或很难解决，而使用递归的方法可以很好地解决问题。
	
		3、必定要有一个明确的结束递归的条件。
		说明：一定要能够在适当的地方结束递归调用。不然可能导致系统崩溃。
		
	注：递归函数会耗费更多的运行时间，并且要占用大量的栈空间。递归函数每次调用自身时，都需要把它的状态存到栈中，以便在它调用完自身后，程序可以返回到它原来的状态。未经精心设计的递归函数总是会带来麻烦。	
		
C可变参数：		
	函数带有可变数量的参数，而不是预定义数量的参数	
	例：
		int func(int, ... ) 
		{
			.
			.
			.
		}

		int main()
		{
			func(1, 2, 3);
			func(1, 2, 3, 4);
		}
	注：函数 func() 最后一个参数写成省略号，即三个点号（...），省略号之前的那个参数是 int，代表了要传递的可变参数的总数。
	为了使用这个功能，您需要使用 stdarg.h 头文件，该文件提供了实现可变参数功能的函数和宏。
	具体步骤如下：
		1、定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。
		2、在函数定义中创建一个 va_list 类型的变量，该类型是在 stdarg.h 头文件中定义的。
		3、使用 int 参数和 va_start 宏来初始化 va_list(类型的)变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义的。
		4、使用 va_arg 宏和 va_list 变量来访问参数列表中的每个项。
		5、使用宏 va_end 来清理赋予 va_list (类型的)变量的内存。
	按照上面的步骤，来编写一个带有可变数量参数的函数，并返回它们的平均值：
		#include <stdio.h>
		#include <stdarg.h>

		double average(int num,...)
		{

			va_list valist;
			double sum = 0.0;
			int i;

			/* 为 num 个参数初始化 valist */
			va_start(valist, num);

			/* 访问所有赋给 valist 的参数 */
			for (i = 0; i < num; i++)
			{
				sum += va_arg(valist, int);
			}
			/* 清理为 valist 保留的内存 */
			va_end(valist);

			return sum/num;
		}

		int main()
		{
			printf("Average of 2, 3, 4, 5 = %f\n", average(4, 2,3,4,5));
			printf("Average of 5, 10, 15 = %f\n", average(3, 5,10,15));
		}
	当上面的代码被编译和执行时，它会产生下列结果。应该指出的是，函数 average() 被调用两次，每次第一个参数都是表示被传的可变参数的总数。省略号被用来传递可变数量的参数。
	Average of 2, 3, 4, 5 = 3.500000
	Average of 5, 10, 15 = 10.000000	
		
	C 函数要在程序中用到以下这些宏:
		void va_start( va_list arg_ptr, prev_param ); 
		type va_arg( va_list arg_ptr, type ); 
		void va_end( va_list arg_ptr );
	va_list: 用来保存宏va_start、va_arg和va_end所需信息的一种类型。为了访问变长参数列表中的参数，必须声明 va_list 类型的一个对象，定义： typedef char * va_list;
	va_start: 访问变长参数列表中的参数之前使用的宏，它初始化用 va_list 声明的对象，初始化结果供宏 va_arg 和 va_end 使用；
	va_arg: 展开成一个表达式的宏，该表达式具有变长参数列表中下一个参数的值和类型。每次调用 va_arg 都会修改用 va_list 声明的对象，从而使该对象指向参数列表中的下一个参数；
	va_end: 该宏使程序能够从变长参数列表用宏 va_start 引用的函数中正常返回。
	va 在这里是 variable-argument(可变参数) 的意思。
	这些宏定义在 stdarg.h 中，所以用到可变参数的程序应该包含这个头文件。	
		
	下面我们写一个简单的可变参数的函数，改函数至少有一个整数参数，第二个参数也是整数，是可选的。函数只是打印这两个参数的值。
		#include <stdio.h>;  
		#include <string.h>;  
		#include <stdarg.h>;  

		/* ANSI标准形式的声明方式，括号内的省略号表示可选参数 */  
		int demo(char *msg, ... )  
		{  
			va_list argp;			/* 定义保存函数参数的结构 */  
			int argno = 0;			/* 记录参数个数 */  
			char *para;				/* 存放取出的字符串参数 */  				                    
			va_start( argp, msg );  /* argp指向传入的第一个可选参数，  	msg是最后一个确定的参数 */  
	
			while (1) 
			{  
				para = va_arg( argp, char *);    /*取出当前的参数，类型为char *. */  
				if ( strcmp( para, "/0") == 0 )  /* 采用空串指示参数输入结束 */  
					break;  
				printf("Parameter #%d is: %s/n", argno, para);  
				argno++;  
			}  
			va_end( argp );    /* 将argp置为NULL */  
			return 0;  
		}

		void main( void )  
		{  
			demo("DEMO", "This", "is", "a", "demo!" ,"333333", "/0");  
		}    
	从这个函数的实现可以看到,我们使用可变参数应该有以下步骤:
	1)首先在函数里定义一个 va_list 型的变量,这里是 arg_ptr，这个变量是指向参数的指针。
	2)然后用 va_start 宏初始化变量 arg_ptr，这个宏的第二个参数是第一个可变参数的前一个参数，是一个固定的参数。
	3)然后用 va_arg 返回可变的参数，并赋值给整数 j。va_arg 的第二个参数是你要返回的参数的类型，这里是int型。
	4)最后用 va_end 宏结束可变参数的获取。然后你就可以在函数里使用第二个参数了。如果函数有多个可变参数的，依次调用 va_arg 获取各个参数。	
		
C内存管理：
	C 语言为内存的分配和管理提供了几个函数。这些函数可以在 <stdlib.h> 头文件中找到。		
		void *calloc(int num, int size);
	在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。
		
		void free(void *address); 
	该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。
		
		void *malloc(int num); 
	在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。
		
		void *realloc(void *address, int newsize); 
	该函数重新分配内存，把内存扩展到 newsize。
		
	动态分配内存：
	例：
		#include <stdio.h>
		#include <stdlib.h>
		#include <string.h>

		int main()
		{
			char name[100];
			char *description;

			strcpy(name, "Zara Ali");

			/* 动态分配内存 */
			description = malloc( 200 * sizeof(char) );
			if( description == NULL )
			{
				fprintf(stderr, "Error - unable to allocate required memory\n");
			}
			else
			{
				strcpy( description, "Zara ali a DPS student in class 10th");
			}
			printf("Name = %s\n", name );
			printf("Description: %s\n", description );
		}
	当上面的代码被编译和执行时，它会产生下列结果：
		Name = Zara Ali
		Description: Zara ali a DPS student in class 10th
	上面的程序也可以使用 calloc() 来编写，只需要把 malloc 替换为 calloc 即可，如下所示：
		calloc(200, sizeof(char));
	当动态分配内存时，您有完全控制权，可以传递任何大小的值。而那些预先定义了大小的数组，一旦定义则无法改变大小。
		
	重新调整内存的大小和释放内存：
		当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 free() 来释放内存。
		或者通过调用函数 realloc() 来增加或减少已分配的内存块的大小。
		让我们使用 realloc() 和 free() 函数，再次查看上面的实例：
			#include <stdio.h>
			#include <stdlib.h>
			#include <string.h>

			int main()
			{
				char name[100];
				char *description;
	
				strcpy(name, "Zara Ali");

				/* 动态分配内存 */
				description = malloc( 30 * sizeof(char) );
				if( description == NULL )
				{
					fprintf(stderr, "Error - unable to allocate required memory\n");
				}
				else
				{
					strcpy( description, "Zara ali a DPS student.");
				}
				/* 假设您想要存储更大的描述信息 */
				description = realloc( description, 100 * sizeof(char) );
				if( description == NULL )
				{
					fprintf(stderr, "Error - unable to allocate required memory\n");
				}
				else
				{
					strcat( description, "She is in class 10th");
				}
   
				printf("Name = %s\n", name );
				printf("Description: %s\n", description );
	
				/* 使用 free() 函数释放内存 */
				free(description);
			}
		当上面的代码被编译和执行时，它会产生下列结果：
			Name = Zara Ali
			Description: Zara ali a DPS student.She is in class 10th
		您可以尝试一下不重新分配额外的内存，strcat() 函数会生成一个错误，因为存储 description 时可用的内存不足。
		
C 命令行参数：
	执行程序时，可以从命令行传值给 C 程序。这些值被称为命令行参数
	命令行参数是使用 main() 函数参数来处理的，其中，argc 是指传入参数的个数，argv[] 是一个指针数组，指向传递给程序的每个参数。	
	下面是一个简单的实例，检查命令行是否有提供参数，并根据参数执行相应的动作：
		#include <stdio.h>

		int main( int argc, char *argv[] )  
		{
			if( argc == 2 )
			{
				printf("The argument supplied is %s\n", argv[1]);
			}
			else if( argc > 2 )
			{
				printf("Too many arguments supplied.\n");
			}
			else
			{
				printf("One argument expected.\n");
			}
		}
	使用一个参数，编译并执行上面的代码，它会产生下列结果：
		$./a.out testing
		The argument supplied is testing
	使用两个参数，编译并执行上面的代码，它会产生下列结果：
		$./a.out testing1 testing2
		Too many arguments supplied.
	不传任何参数，编译并执行上面的代码，它会产生下列结果：
		$./a.out
		One argument expected		
	argv[0] 存储程序的名称，argv[1] 是一个指向第一个命令行参数的指针，*argv[n] 是最后一个参数。
	如果没有提供任何参数，argc 将为 1，否则，如果传递了一个参数，argc 将被设置为 2。	
	多个命令行参数之间用空格分隔，但是如果参数本身带有空格，那么传递参数的时候应把参数放置在双引号 "" 或单引号 '' 内部。	
		
		
实例练习：
	字符转ASCII码：
		ASCII码定义了128个字符
		0~31、127（del键）是控制字符
		空白字符：空格（32）制表符、垂直制表符、换行符、回车
		可显示字符：......
	ASCII值	控制字符	ASCII值	控制字符	ASCII值	控制字符	ASCII值	控制字符
	  0	  NUT		 32	(space)		  64	  @		  96	   、
	  1	  SOH		 33	  !		  65	  A		  97	   a
	  2	  STX		 34	  "		  66	  B		  98	   b
	  3	  ETX		 35	  #		  67	  C		  99	   c
	  4	  EOT		 36	  $		  68	  D		  100	   d
	  5	  ENQ		 37	  %		  69	  E		  101	   e
	  6	  ACK		 38	  &		  70	  F		  102	   f
	  7	  BEL		 39	  ,		  71	  G		  103	   g
	  8	  BS		 40	  (		  72	  H		  104	   h
	  9	  HT		 41	  )		  73	  I		  105	   i
	  10	  LF		 42	  *		  74	  J		  106	   j
	  11	  VT		 43	  +		  75	  K		  107	   k
	  12	  FF		 44	  ,		  76	  L		  108	   l
	  13	  CR		 45	  -		  77	  M		  109	   m
	  14	  SO		 46	  .		  78	  N		  110	   n
	  15	  SI		 47	  /		  79	  O		  111	   o
	  16	  DLE		 48	  0		  80	  P		  112	   p
	  17	  DCI		 49	  1		  81	  Q		  113	   q
	  18	  DC2		 50	  2		  82	  R		  114	   r
	  19	  DC3		 51	  3		  83	  S		  115	   s
	  20	  DC4		 52	  4		  84	  T		  116	   t
	  21	  NAK		 53	  5		  85	  U		  117	   u
	  22	  SYN		 54	  6		  86	  V		  118	   v
	  23	  TB		 55	  7		  87	  W		  119	   w
	  24	  CAN		 56	  8		  88	  X		  120	   x
	  25	  EM		 57	  9		  89	  Y		  121	   y
	  26	  SUB		 58	  :		  90	  Z		  122	   z
	  27	  ESC		 59	  ;		  91	  [		  123	   {
	  28	  FS		 60	  <		  92	  /		  124	   |
	  29	  GS		 61	  =		  93	  ]		  125	   }
	  30	  RS		 62	  >		  94	  ^		  126	   `
	  31	  US		 63	  ?		  95	  _		  127	   DEL		
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
