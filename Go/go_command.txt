Usage:

	go <command> [arguments]

The commands are:

	bug         start a bug report
	build       compile packages and dependencies
	clean       remove object files and cached files
	doc         show documentation for package or symbol
	env         print Go environment information
	fix         update packages to use new APIs
	fmt         gofmt (reformat) package sources
	generate    generate Go files by processing source
	get         add dependencies to current module and install them
	install     compile and install packages and dependencies
	list        list packages or modules
	mod         module maintenance
	run         compile and run Go program
	test        test packages
	tool        run specified go tool
	version     print Go version
	vet         report likely mistakes in packages

Use "go help <command>" for more information about a command.

Additional help topics:

	buildmode   build modes
	c           calling between Go and C
	cache       build and test caching
	environment environment variables
	filetype    file types
	go.mod      the go.mod file
	gopath      GOPATH environment variable
	gopath-get  legacy GOPATH go get
	goproxy     module proxy protocol
	importpath  import path syntax
	modules     modules, module versions, and more
	module-get  module-aware go get
	module-auth module authentication using go.sum
	module-private module configuration for non-public modules
	packages    package lists and patterns
	testflag    testing flags
	testfunc    testing functions

Use "go help <topic>" for more information about that topic.


go build 解析：
1、普通包，执行后不会再当前目录下生成文件，但main包，执行后会在当前目录先生成相应的文件
2、go build 会忽略目录下以“_”或“.” 开头的go文件
3、go build默认编译当前目录下所有的go文件
4、如果源码根据平台有不同的处理，可以更具不同的操作系统后缀来命名文件。
    如：a_linux.go、a_windows.go

	参数的介绍：
	-o 指定输出的文件名，可以带上路径，例如 go build -o a/b/c
	-i 安装相应的包，编译+go install
	-a 更新全部已经是最新的包的，但是对标准包不适用
	-n 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的
	-p n 指定可以并行可运行的编译数目，默认是CPU数目
	-race 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器
	-v 打印出来我们正在编译的包名
	-work 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除
	-x 打印出来执行的命令，其实就是和-n的结果类似，只是这个会执行
	-ccflags 'arg list' 传递参数给5c, 6c, 8c 调用
	-compiler name 指定相应的编译器，gccgo还是gc
	-gccgoflags 'arg list' 传递参数给gccgo编译连接调用
	-gcflags 'arg list' 传递参数给5g, 6g, 8g 调用
	-installsuffix suffix 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，-race的时候默认已经是-installsuffix race,大家可以通过-n命令来验证
	-ldflags 'flag list' 传递参数给5l, 6l, 8l 调用
	-tags 'tag list' 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的官网


go clean 解析：
	用来移除当前源码包和关联源码包里面编译生成的文件。

	参数介绍：
	-i 清除关联的安装的包和可运行文件，也就是通过go install安装的文件
	-n 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的
	-r 循环的清除在import中引入的包
	-x 打印出来执行的详细命令，其实就是-n打印的执行版本

go fmt解析：
	go强制了代码格式（比如左大括号必须放在行尾），不按照此格式的代码将不能编译通过，为了减少浪费在排版上的时间，go工具集中提供了一个go fmt命令 它可以帮你格式化你写好的代码文件，使你写代码的时候不需要关心格式，你只需要在写完之后执行go fmt <文件名>.go，你的代码就被修改成了标准格式。

	使用go fmt命令，其实是调用了gofmt，而且需要参数-w，否则格式化结果不会写入文件。gofmt -w -l src，可以格式化整个项目。所以go fmt是gofmt的上层一个包装的命令。
	
	参数介绍：
	-l 显示那些需要格式化的文件
	-w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。
	-r 添加形如“a[b:len(a)] -> a[b:]”的重写规则，方便我们做批量替换
	-s 简化文件中的代码
	-d 显示格式化前后的diff而不是写入文件，默认是false
	-e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。
	-cpuprofile 支持调试模式，写入相应的cpufile到指定的文件


go get解析：
	用来动态获取远程代码包的，目前支持的有BitBucket、GitHub、Google Code和Launchpad。这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行go install。为了go get 能正常工作，你必须确保安装了合适的源码管理工具
	
	参数介绍：

	-d 只下载不安装
	-f 只有在你包含了-u参数的时候才有效，不让-u去验证import中的每一个都已经获取了，这对于本地fork的包特别有用
	-fix 在获取源码之后先运行fix，然后再去做其他的事情
	-t 同时也下载需要为运行测试所需要的包
	-u 强制使用网络去更新包和它的依赖包
	-v 显示执行的命令
	
	
go install解析：
	这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin
	
	参数介绍：
	-v 可以查看底层的执行信息
	

go test解析：
	执行这个命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。
	
	参数介绍：
	-bench regexp 执行相应的benchmarks，例如 -bench=.
	-cover 开启测试覆盖率
	-run regexp 只运行regexp匹配的函数，例如 -run=Array 那么就执行包含有Array开头的函数
	-v 显示测试的详细命令
	

go tool解析：
go tool下面下载聚集了很多命令，这里我们只介绍两个，fix和vet
go tool fix . 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1,例如API的变化
go tool vet directory|files 用来分析当前目录的代码是否都是正确的代码,例如是不是调用fmt.Printf里面的参数不正确，例如函数里面提前return了然后出现了无用代码之类的。
	
	
go generate解析：
	这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。go generate和go build是完全不一样的命令，通过分析源码中特殊的注释，然后执行相应的命令。这些命令都是很明确的，没有任何的依赖在里面。而且大家在用这个之前心里面一定要有一个理念，这个go generate是给你用的，不是给使用你这个包的人用的，是方便你来生成一些代码的。
	

godoc

go version 查看go当前的版本
go env 查看当前go的环境变量
go list 列出当前全部安装的package
go run 编译并运行Go程序
	
	
	
	
	
	
	
	
